service: express-auth-boilerplate
frameworkVersion: '>=4.0.0'

plugins:
  - serverless-prune-versions
  - serverless-plugin-typescript
  - serverless-plugin-common-excludes

build:
  esbuild: false

package:
  individually: true
  excludeDevDependencies: true
  patterns:
    - 'prisma'
    - 'tsconfig.json'

custom:
  serverlessPluginTypescript:
    tsConfigFileLocation: './tsconfig.serverless.json'
  stage: ${opt:stage, "offline"}
  region: ${self:custom.availableRegions.${self:custom.stage}}
  availableRegions:
    prod: eu-north-1
  cronEnabled:
    prod: true
  myVpc:
    prod:
      securityGroupIds:
        - sg-XXXXX
      subnetIds:
        - subnet-XXXXX
        - subnet-XXXXX
        - subnet-XXXXX
  myEnvironment:
    prod:
      APP_ENV: prod
      LOG_LEVEL: warning
      AWS_REGION: eu-north-1
      ACCESS_TOKEN_SECRET: ${ssm:/some/ssm-parameter}
      REFRESH_TOKEN_SECRET: ${ssm:/some/ssm-parameter}
      DATABASE_URL: ${ssm:/some/ssm-parameter}
      FRONTEND_URL: http://localhost:3000
      MAILER_FROM: '"Example Team" <info@example.com>'
      WORKQUEUE_URL: https://sqs.<AWS_REGION>.amazonaws.com/<ACCOUNT_ID>/express-auth-boilerplate-<STAGE>-workqueue

provider:
  name: aws
  runtime: nodejs20.x
  region: ${self:custom.region}
  stage: ${self:custom.stage}
  timeout: 20
  lambdaHashingVersion: 20201221
  deploymentBucket:
    name: some-bucket-name-${self:custom.region}
    blockPublicAccess: true
  vpc: ${self:custom.myVpc.${self:custom.stage}}
  environment: ${self:custom.myEnvironment.${self:custom.stage}}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:DeleteMessageBatch
      Resource:
        - Fn::GetAtt: [MessagesQueue, Arn]

functions:
  website:
    handler: src/server.handler
    memorySize: 512
    timeout: 5
    events:
      - httpApi: '*'

  worker:
    handler: src/worker.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - workqueue
              - Arn

  console:
    handler: src/console.handler
    timeout: 900 # in seconds
    reservedConcurrency: 5 # max messages processed in parallel
    environment:
      LOG_LEVEL: info
    events:
      - schedule:
          enabled: ${self:custom.cronEnabled.${self:custom.stage}}
          rate: rate(1 day)
          input: '"db:delete-expired-tokens"'

resources:
  Resources:
    workqueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: workqueue
        VisibilityTimeout: 120
